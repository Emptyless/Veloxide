// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "bank_account_service.proto" (package "bank_account_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Bank account transaction
 *
 * @generated from protobuf message bank_account_service.AccountTransaction
 */
export interface AccountTransaction {
    /**
     * @generated from protobuf field: string description = 1;
     */
    description: string;
    /**
     * @generated from protobuf field: double amount = 2;
     */
    amount: number;
}
/**
 * Bank account view
 *
 * @generated from protobuf message bank_account_service.BankAccountView
 */
export interface BankAccountView {
    /**
     * @generated from protobuf field: string account_id = 1;
     */
    accountId: string;
    /**
     * @generated from protobuf field: double balance = 2;
     */
    balance: number;
    /**
     * @generated from protobuf field: repeated string written_checks = 3;
     */
    writtenChecks: string[];
    /**
     * @generated from protobuf field: repeated bank_account_service.AccountTransaction account_transactions = 4;
     */
    accountTransactions: AccountTransaction[];
}
/**
 * Request to get bank account details
 *
 * @generated from protobuf message bank_account_service.GetBankAccountRequest
 */
export interface GetBankAccountRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // Bank account ID
}
/**
 * Response for getting bank account details
 *
 * @generated from protobuf message bank_account_service.GetBankAccountResponse
 */
export interface GetBankAccountResponse {
    /**
     * @generated from protobuf field: bank_account_service.BankAccountView account_view = 1;
     */
    accountView?: BankAccountView;
}
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransaction$Type extends MessageType<AccountTransaction> {
    constructor() {
        super("bank_account_service.AccountTransaction", [
            { no: 1, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<AccountTransaction>): AccountTransaction {
        const message = { description: "", amount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AccountTransaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountTransaction): AccountTransaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string description */ 1:
                    message.description = reader.string();
                    break;
                case /* double amount */ 2:
                    message.amount = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccountTransaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string description = 1; */
        if (message.description !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.description);
        /* double amount = 2; */
        if (message.amount !== 0)
            writer.tag(2, WireType.Bit64).double(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bank_account_service.AccountTransaction
 */
export const AccountTransaction = new AccountTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountView$Type extends MessageType<BankAccountView> {
    constructor() {
        super("bank_account_service.BankAccountView", [
            { no: 1, name: "account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "balance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "written_checks", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "account_transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AccountTransaction }
        ]);
    }
    create(value?: PartialMessage<BankAccountView>): BankAccountView {
        const message = { accountId: "", balance: 0, writtenChecks: [], accountTransactions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BankAccountView>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountView): BankAccountView {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_id */ 1:
                    message.accountId = reader.string();
                    break;
                case /* double balance */ 2:
                    message.balance = reader.double();
                    break;
                case /* repeated string written_checks */ 3:
                    message.writtenChecks.push(reader.string());
                    break;
                case /* repeated bank_account_service.AccountTransaction account_transactions */ 4:
                    message.accountTransactions.push(AccountTransaction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountView, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_id = 1; */
        if (message.accountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountId);
        /* double balance = 2; */
        if (message.balance !== 0)
            writer.tag(2, WireType.Bit64).double(message.balance);
        /* repeated string written_checks = 3; */
        for (let i = 0; i < message.writtenChecks.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.writtenChecks[i]);
        /* repeated bank_account_service.AccountTransaction account_transactions = 4; */
        for (let i = 0; i < message.accountTransactions.length; i++)
            AccountTransaction.internalBinaryWrite(message.accountTransactions[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bank_account_service.BankAccountView
 */
export const BankAccountView = new BankAccountView$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBankAccountRequest$Type extends MessageType<GetBankAccountRequest> {
    constructor() {
        super("bank_account_service.GetBankAccountRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBankAccountRequest>): GetBankAccountRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBankAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBankAccountRequest): GetBankAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBankAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bank_account_service.GetBankAccountRequest
 */
export const GetBankAccountRequest = new GetBankAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBankAccountResponse$Type extends MessageType<GetBankAccountResponse> {
    constructor() {
        super("bank_account_service.GetBankAccountResponse", [
            { no: 1, name: "account_view", kind: "message", T: () => BankAccountView }
        ]);
    }
    create(value?: PartialMessage<GetBankAccountResponse>): GetBankAccountResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBankAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBankAccountResponse): GetBankAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bank_account_service.BankAccountView account_view */ 1:
                    message.accountView = BankAccountView.internalBinaryRead(reader, reader.uint32(), options, message.accountView);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBankAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bank_account_service.BankAccountView account_view = 1; */
        if (message.accountView)
            BankAccountView.internalBinaryWrite(message.accountView, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bank_account_service.GetBankAccountResponse
 */
export const GetBankAccountResponse = new GetBankAccountResponse$Type();
/**
 * @generated ServiceType for protobuf service bank_account_service.BankAccountService
 */
export const BankAccountService = new ServiceType("bank_account_service.BankAccountService", [
    { name: "GetBankAccount", options: {}, I: GetBankAccountRequest, O: GetBankAccountResponse }
]);
